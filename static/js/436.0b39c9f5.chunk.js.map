{"version":3,"file":"static/js/436.0b39c9f5.chunk.js","mappings":"2OACA,EAAiC,8BAAjC,EAA2E,yBAA3E,EAA2G,oBAA3G,EAAoJ,kC,0BC0BvIA,EAAgB,WAE3B,IAAMC,GAA0BC,EAAAA,EAAAA,MAE1BC,GAAgBC,EAAAA,EAAAA,KAChBC,GAAmBD,EAAAA,EAAAA,KAYzB,OACE,SAAC,KAAM,CAACE,cAZY,CACpBC,MAAO,GACPC,SAAU,IAU4BC,gBAAc,EAACC,SARtC,SACfC,EAAkB,GAEd,IADHC,EAAa,EAAbA,cAAeC,EAAS,EAATA,UAEhBZ,GAASa,EAAAA,EAAAA,IAAUH,EAAQE,IAC3BD,GAAc,EAChB,EAE0E,SACrE,gBAAED,EAAM,EAANA,OAAQI,EAAM,EAANA,OAAM,OACf,UAAC,KAAI,YACH,0BACE,iBAAKC,UAAWC,EAAgB,WAC9B,8DACA,0BACE,SAAC,KAAK,CACJC,KAAK,OACLC,KAAK,QACLC,MAAOT,EAAOJ,MACdc,SAAUlB,YAKlB,0BACE,iBAAKa,UAAWC,EAAgB,WAC9B,oEACA,0BACE,SAAC,KAAK,CACJC,KAAK,WACLC,KAAK,WACLC,MAAOT,EAAOH,SACda,SAAUhB,YAKlB,gBAAKW,UAAWC,EAAW,SAAEF,KAE7B,gBAAKC,UAAWC,EAAW,UACzB,mBAAQD,UAAU,kBAAkBE,KAAK,SAAQ,gDAI9C,GAIf,EACA,EA1EkB,WAEhB,OADoBI,EAAAA,EAAAA,IAAYC,EAAAA,KAEvB,SAAC,KAAQ,CAACC,GAAI,aAGrB,iBAAKR,UAAWC,EAAqB,WACnC,yEACA,gBAAKD,UAAWC,EAAyB,UACvC,SAACjB,EAAS,QAIlB,C","sources":["webpack://me-app-react/./src/components/Main/Login/Login.module.css?3d22","components/Main/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginContainer\":\"Login_loginContainer__Qg-Hm\",\"loginForm\":\"Login_loginForm__mBq23\",\"item\":\"Login_item__VHA0m\",\"loginFormContainer\":\"Login_loginFormContainer__HgXz3\"};","import {Formik, Field, Form, FormikHelpers} from 'formik'\nimport {validateRequired} from '../../../utility/validate'\nimport {Navigate} from 'react-router-dom'\nimport React, {FC} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {ThunkDispatch} from 'redux-thunk'\nimport {AppStateType} from '../../../redux/reduxStore'\nimport style from './Login.module.css'\nimport {ActionTypes, loginUser} from '../../../redux/authReducer'\nimport {loginType} from '../../../types/types'\nimport {getAccessToken} from '../../../redux/reduxSelectors/searchPageSelector'\n\nconst Login: FC = () => {\n  const accessToken = useSelector(getAccessToken)\n  if (accessToken) {\n    return <Navigate to={'/search'} />\n  }\n  return (\n    <div className={style.loginContainer}>\n      <h1>Вход в YouTube API</h1>\n      <div className={style.loginFormContainer}>\n        <LoginForm />\n      </div>\n    </div>\n  )\n}\n\nexport const LoginForm: FC = () => {\n  type loginDispatch = ThunkDispatch<AppStateType, any, ActionTypes>\n  const dispatch: loginDispatch = useDispatch()\n\n  const validateEmail = validateRequired()\n  const validatePassword = validateRequired()\n  const initialValues = {\n    login: '',\n    password: '',\n  }\n  const onSubmit = (\n    values: loginType,\n    {setSubmitting, setStatus}: FormikHelpers<loginType>,\n  ) => {\n    dispatch(loginUser(values, setStatus))\n    setSubmitting(false)\n  }\n  return (\n    <Formik initialValues={initialValues} validateOnBlur onSubmit={onSubmit}>\n      {({values, status}) => (\n        <Form>\n          <div>\n            <div className={style.loginForm}>\n              <div>Логин:</div>\n              <div>\n                <Field\n                  type=\"text\"\n                  name=\"login\"\n                  value={values.login}\n                  validate={validateEmail}\n                />\n              </div>\n            </div>\n          </div>\n          <div>\n            <div className={style.loginForm}>\n              <div>Пароль:</div>\n              <div>\n                <Field\n                  type=\"password\"\n                  name=\"password\"\n                  value={values.password}\n                  validate={validatePassword}\n                />\n              </div>\n            </div>\n          </div>\n          <div className={style.item}>{status}</div>\n\n          <div className={style.item}>\n            <button className=\"btn btn-primary\" type=\"submit\">\n              Войти\n            </button>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  )\n}\nexport default Login\n"],"names":["LoginForm","dispatch","useDispatch","validateEmail","validateRequired","validatePassword","initialValues","login","password","validateOnBlur","onSubmit","values","setSubmitting","setStatus","loginUser","status","className","style","type","name","value","validate","useSelector","getAccessToken","to"],"sourceRoot":""}